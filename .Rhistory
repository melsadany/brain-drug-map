avg.brain.exp.ls[1:3,1:3]
avg.brain.exp.ls.filt[1:3,1:3]
corr.brain.exp.ls <- read_rds("data/exp/combined-aggr-exp-of-all-subjects_corr-sex-age-donor-ethn-PMI.rds")
corr.brain.exp.ls[1:3,1:3]
load("data/exp/filt-ecp-corr-sex-age-donor-ethn-PMI_w-annot.rda")
View(annot.ls.filt)
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
# try another approach
# predict gene expression vector for all brain regions instead of drug corr
rm(list = ls())
gc()
library(tidyverse, lib.loc = "/Dedicated/jmichaelson-wdata/msmuhammad/workbench/miniconda3/envs/tximpute/lib/R/library")
library(oro.nifti, lib.loc = "/Dedicated/jmichaelson-wdata/msmuhammad/workbench/miniconda3/envs/ENA/lib/R/library")
library(tensorflow)
use_condaenv("EDL")
library(keras)
k_clear_session()
set.seed(123)
#################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/brain-drug-map"
setwd(project.dir)
#################################################################################
load("data/exp/filt-ecp-corr-sex-age-donor-ethn-PMI_w-annot.rda")
xyz <- annot.ls.filt[,paste0("mni_", c("x", "y", "z"))]
View(xyz)
xyz <- annot.ls.filt[,paste0("mni_", c("x", "y", "z"))] %>% as.matrix()
View(xyz)
hist(corr.brain.exp.ls[,1])
hist(corr.brain.exp.ls[,55])
#################################################################################
# model
rm(model)
k_clear_session()
corr.brain.exp.ls[1:3,1:3]
annot.ls.filt[1:3,1:3]
x.train <- xyz
y.train <- corr.brain.exp.ls %>% as.matrix()
#################################################################################
# model
rm(model)
k_clear_session()
model <- keras_model_sequential(input_shape = c(dim(xyz)[2])) %>%
layer_dense(units = 64, activation = "relu") %>%
# layer_dropout(0.2) %>%
layer_dense(units = 64, activation = "relu",
use_bias = TRUE,
# kernel_regularizer = regularizer_l2(1e-6),
) %>%
layer_dense(units = ncol(y.train), activation = "linear",
kernel_regularizer=regularizer_l2(1e-6),
use_bias = T)
#################################################################################
# Compile the model
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(learning_rate = 0.01),
metrics = c("mse", "mae", "accuracy"),
loss_weights=list(c(1))
)
# summary(model)
# Train the model
history <- model %>% fit(
x = x.train,
y = y.train,
epochs = 100,
batch_size = 512,
validation_split = 0.01
# validation_data = list(x.val%>%as.matrix(), y.val%>%as.matrix())
)
#################################################################################
# model
rm(model)
k_clear_session()
model <- keras_model_sequential(input_shape = c(dim(xyz)[2])) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 32, activation = "relu",
use_bias = TRUE) %>%
layer_dense(units = ncol(y.train), activation = "linear",
kernel_regularizer=regularizer_l2(1e-6),
use_bias = T)
#################################################################################
# Compile the model
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(learning_rate = 0.01),
metrics = c("mse", "mae", "accuracy"),
loss_weights=list(c(1))
)
summary(model)
# summary(model)
# Train the model
history <- model %>% fit(
x = x.train,
y = y.train,
epochs = 100,
batch_size = 256,
validation_split = 0.01,
shuffle =T
# validation_data = list(x.val%>%as.matrix(), y.val%>%as.matrix())
)
use_condaenv("EDL")
library(tensorflow)
library(keras)
k_clear_session()
set.seed(123)
#################################################################################
# model
rm(model)
k_clear_session()
model <- keras_model_sequential(input_shape = c(dim(xyz)[2])) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 32, activation = "relu",
use_bias = TRUE) %>%
layer_dense(units = ncol(y.train), activation = "linear",
kernel_regularizer=regularizer_l2(1e-6),
use_bias = T)
#################################################################################
# Compile the model
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(learning_rate = 0.01),
metrics = c("mse", "mae", "accuracy"),
loss_weights=list(c(1))
)
summary(model)
# summary(model)
# Train the model
history <- model %>% fit(
x = x.train,
y = y.train,
epochs = 100,
batch_size = 256,
validation_split = 0.01,
shuffle =T
# validation_data = list(x.val%>%as.matrix(), y.val%>%as.matrix())
)
#################################################################################
cmap.of.int <- read_rds("/Dedicated/jmichaelson-wdata/msmuhammad/data/LINCS/cmap.of.int.rds")
dim(cmap.of.int)
genes <- colnames(cmap.of.int)
y.train <- corr.brain.exp.ls[,genes] %>% as.matrix()
table(genes %in% colnames(corr.brain.exp.ls))
y.train <- corr.brain.exp.ls %>% select(genes) %>% as.matrix()
y.train <- corr.brain.exp.ls %>% select(any_of(genes)) %>% as.matrix()
dim(y.train)
#################################################################################
# model
rm(model)
k_clear_session()
model <- keras_model_sequential(input_shape = c(dim(xyz)[2])) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 32, activation = "relu",
use_bias = TRUE) %>%
layer_dense(units = ncol(y.train), activation = "linear",
kernel_regularizer=regularizer_l2(1e-6),
use_bias = T)
#################################################################################
# Compile the model
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(learning_rate = 0.01),
metrics = c("mse", "mae", "accuracy"),
loss_weights=list(c(1))
)
summary(model)
# summary(model)
# Train the model
history <- model %>% fit(
x = x.train,
y = y.train,
epochs = 100,
batch_size = 256,
validation_split = 0.01,
shuffle =T
# validation_data = list(x.val%>%as.matrix(), y.val%>%as.matrix())
)
#################################################################################
# model
rm(model)
k_clear_session()
model <- keras_model_sequential(input_shape = c(dim(xyz)[2])) %>%
layer_dense(units=32,activation="relu",
use_bias=T,
) %>%
layer_dropout(0.2) %>%
layer_dense(units=32,activation="relu",
use_bias=T,
) %>%
layer_dense(units=32,activation="relu",
use_bias=T,
) %>%
layer_batch_normalization() %>%
layer_dense(units=256,activation="linear",
kernel_initializer=initializer_orthogonal(),
kernel_constraint=constraint_unitnorm(),
use_bias=F,
) %>%
layer_dropout(0.33) %>%
layer_dense(units=ncol(y.train),activation="linear",
kernel_regularizer=regularizer_l1(1e-4),
#	kernel_constraint=constraint_nonneg(),
use_bias=T)
#################################################################################
# model
rm(model)
k_clear_session()
model <- keras_model_sequential(input_shape = c(dim(xyz)[2])) %>%
layer_dense(units=32,activation="relu",
use_bias=T,
) %>%
layer_dropout(0.2) %>%
layer_dense(units=32,activation="relu",
use_bias=T,
) %>%
layer_dense(units=32,activation="relu",
use_bias=T,
) %>%
layer_batch_normalization() %>%
layer_dense(units=256,activation="linear",
kernel_initializer=initializer_orthogonal(),
kernel_constraint=constraint_unitnorm(),
use_bias=F,
) %>%
layer_dropout(0.33) %>%
layer_dense(units=ncol(y.train),activation="linear",
kernel_regularizer=regularizer_l1(1e-4),
#	kernel_constraint=constraint_nonneg(),
use_bias=T)
mni <- readNIfTI("/Dedicated/jmichaelson-wdata/msmuhammad/refs/mni_icbm152_nlin_sym_09c_CerebrA_nifti/mni_icbm152_CerebrA_tal_nlin_sym_09c.nii", reorient = F)
mni.pos <- mni[mni>0]
mni.pos <- which(mni[mni>0], arr.ind = T)
mni.pos <- which(mni>0, arr.ind = T)
View(mni.pos)
mni.pos <- mni.pos %>%
as.data.frame() %>%
mutate(x=dim1+origin[1]) %>%
mutate(y=dim2+origin[2]) %>%
mutate(z=dim3+origin[3])
View(mni.pos)
origin <- c(97,133,79)
mni.pos <- mni.pos %>%
as.data.frame() %>%
mutate(x=dim1+origin[1]) %>%
mutate(y=dim2+origin[2]) %>%
mutate(z=dim3+origin[3])
mni.pos <- mni.pos %>%
as.data.frame() %>%
mutate(x=dim1-origin[1]) %>%
mutate(y=dim2-origin[2]) %>%
mutate(z=dim3-origin[3])
mni.pos <- mni.pos %>%
as.data.frame() %>%
mutate(x=dim1-origin[1]) %>%
mutate(y=dim2-origin[2]) %>%
mutate(z=dim3-origin[3]) %>%
select(x,y,z)
mni.pos <- mni.pos %>%
as.data.frame() %>%
mutate(x=dim1-origin[1]) %>%
mutate(y=dim2-origin[2]) %>%
mutate(z=dim3-origin[3]) %>%
select(x,y,z) %>% as.matrix()
mni.pos <- which(mni>0, arr.ind = T)
origin <- c(97,133,79)
mni.pos <- mni.pos %>%
as.data.frame() %>%
mutate(x=dim1-origin[1]) %>%
mutate(y=dim2-origin[2]) %>%
mutate(z=dim3-origin[3]) %>%
select(x,y,z) %>% as.matrix()
View(xyz)
write_tsv(xyz, "data/allen-xyz-pos.tsv")
write_tsv(as.data.frame(xyz), "data/allen-xyz-pos.tsv")
rm(list = ls())
gc()
gc()
source("https://raw.githubusercontent.com/melsadany/workbench/master/msmuhammad-source.R", local = T)
install.packages("ggrepel")
source("https://raw.githubusercontent.com/melsadany/workbench/master/msmuhammad-source.R", local = T)
theme_set(theme_minimal())
formatted_tbl <- function(x) {
kableExtra::kable_styling(knitr::kable(x))
}
setwd("/Dedicated/jmichaelson-wdata/msmuhammad//projects/brain-drug-map")
library(plotly)
med <- "methylphenidate"
raw.glm.data <- read_rds("data/glm-predictions.rds")
annotations <- raw.glm.data[,1:(ncol(raw.glm.data)-14)]
raw.glm.data <- raw.glm.data[,(ncol(raw.glm.data)-13):ncol(raw.glm.data)]
raw.DL.predictions <- read_rds("data/model-derivatives/predictions.rds") %>% as.data.frame()
colnames(raw.DL.predictions) <- colnames(raw.glm.data)
data.frame(dl = raw.DL.predictions[,med],
glm = raw.glm.data[,med]) %>%
ggplot(aes(x=dl, y=glm)) +
geom_smooth()
data <- cbind(raw.DL.predictions[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
glm.data <- cbind(raw.glm.data[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
sample <- sample(1:nrow(data), size = 200000)
plot_ly(data[sample,], x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.7, color = ~corr, size = 5) %>%
add_markers()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.align='center')
rm(list = ls())
gc()
source("https://raw.githubusercontent.com/melsadany/workbench/master/msmuhammad-source.R", local = T)
library(plotly)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.align='center')
rm(list = ls())
gc()
source("https://raw.githubusercontent.com/melsadany/workbench/master/msmuhammad-source.R", local = T)
theme_set(theme_minimal())
formatted_tbl <- function(x) {
kableExtra::kable_styling(knitr::kable(x))
}
setwd("/Dedicated/jmichaelson-wdata/msmuhammad//projects/brain-drug-map")
library(plotly)
med <- "methylphenidate"
raw.glm.data <- read_rds("data/glm-predictions.rds")
annotations <- raw.glm.data[,1:(ncol(raw.glm.data)-14)]
raw.glm.data <- raw.glm.data[,(ncol(raw.glm.data)-13):ncol(raw.glm.data)]
raw.DL.predictions <- read_rds("data/model-derivatives/predictions.rds") %>% as.data.frame()
colnames(raw.DL.predictions) <- colnames(raw.glm.data)
data <- cbind(raw.DL.predictions[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
glm.data <- cbind(raw.glm.data[,med],annotations) %>%
as.data.frame() %>%
rename(corr=1) %>%
mutate(region_2 = sub("_", " ", region)) %>%
mutate(h_region = sub("rh_", "right ", h_region)) %>%
mutate(h_region = sub("lh_", "left ", h_region)) %>%
mutate(h_region = sub("_", " ", h_region))
sample <- sample(1:nrow(data), size = 200000)
avg.data <- data %>%
group_by(region_2) %>%
summarize(mean_corr = mean(corr)) %>%
rename(region=region_2)
if (!require("processx")) install.packages("processx")
ggseg3d(data.3d.lh,
atlas = dkt_3d,
colour = "mean_corr", text = "mean_corr",
palette = c("forestgreen", "white", "firebrick"), hemisphere = "left") %>%
remove_axes() %>%
pan_camera("left lateral")
install.packages("ggseg3d")
library(ggseg3d)
ggseg3d(data.3d.lh,
atlas = dkt_3d,
colour = "mean_corr", text = "mean_corr",
palette = c("forestgreen", "white", "firebrick"), hemisphere = "left") %>%
remove_axes() %>%
pan_camera("left lateral")
allen.xyz <- read_tsv("data/allen-xyz-pos.tsv")
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.001, size = 0.000000000000001) %>%
add_markers() %>%
remove_axes() %>%
layout(scene = scene) %>%
# pan_camera("left lateral") %>%
htmlwidgets::onRender(
"function(el, x) {
var gd = document.getElementById(el.id);
Plotly.downloadImage(gd, {format: 'svg', width: 1000, height: 800, filename: 'Allen-brain-points'});
}"
)
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.001, size = 0.000000000000001) %>%
add_markers() %>%
remove_axes()
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.1, size = 0.000000000000001) %>%
add_markers() %>%
remove_axes()
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.1, size = 0.00001) %>%
add_markers() %>%
remove_axes()
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.8, size = 0.00001) %>%
add_markers() %>%
remove_axes()
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.5, size = 0.00001) %>%
add_markers() %>%
remove_axes()
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.6, size = 0.00001) %>%
add_markers() %>%
remove_axes()
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.6, size = 0.0000001) %>%
add_markers() %>%
remove_axes()
scene <- list(camera = list(eye = list(x = 1.5, y = 0, z = 0)))
plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.6, size = 0.0000001) %>%
add_markers() %>%
remove_axes() %>%
layout(scene = scene)
fig <- plot_ly(allen.xyz, x =~mni_x, y=~mni_y,  z=~mni_z,alpha = 0.6, size = 0.0000001) %>%
add_markers() %>%
remove_axes() %>%
layout(scene = scene)
orca(fig, "allen-xyz-pos.svg")
kaleido(fig, "allen-xyz-pos.svg")
save_image(fig, "allen-xyz-pos.svg")
save_image(fig, "allen-xyz-pos.svg")
reticulate::conda_install('r-reticulate', 'python-kaleido')
library(reticulate)
use_condaenv("EDL")
use_condaenv("tximpute")
> reticulate::repl_python()
reticulate::repl_python()
library(shiny); runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
#################################################################################
#################################################################################
# List all HTML files in the directory
html_files <- list.files("data/maps/model-082223/interactive-maps/", pattern = "\\.html$", full.names = TRUE)
# Extract file names without path and ".html" extension
file_names <- gsub(".html$", "", basename(html_files))
file_names
html_files
#################################################################################
#################################################################################
# List all HTML files in the directory
html_files <- list.files("data/maps/model-082223/interactive-maps", pattern = "\\.html$", full.names = TRUE)
# Extract file names without path and ".html" extension
file_names <- gsub(".html$", "", basename(html_files))
# Create a Shiny app
ui <- fluidPage(
titlePanel("predicted drug activity maps viewer"),
selectInput("fileSelect", "Select a file:", choices = file_names),
uiOutput("plotFrame")
)
server <- function(input, output) {
output$plotFrame <- renderUI({
selected_file <- readLines(paste0("data/maps/model-082223/interactive-maps/", input$fileSelect, ".html"))
# Concatenate the lines of the file into a single string
file_content <- paste(selected_file, collapse = "\n")
# Embed the HTML content using an iframe
tags$iframe(
srcdoc = file_content,
width = "100%",
height = "800px",
style = "border: none;"
)
})
}
shinyApp(ui, server)
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
# Create a Shiny app
ui <- fluidPage(
titlePanel("predicted drug activity maps viewer"),
# Add a description text using a paragraph element
p("This app shows the predicted activity maps per drug. the drug list provided here is FDA-approved and have a probability of passing the BBB > 0.5.
the map is built as a correlation between the drug transcriptomic signature from CMAP and the poredicted brain gene expression from a deep learning model.
\n\n Choose a drug from the dropdown to view the 3D activity map."),
selectInput("fileSelect", "Select drug:", choices = file_names),
uiOutput("plotFrame")
# Create a Shiny app
ui <- fluidPage(
titlePanel("predicted drug activity maps viewer"),
# Add a description text using a paragraph element
p("This app shows the predicted activity maps per drug. the drug list provided here is FDA-approved and have a probability of passing the BBB > 0.5.
the map is built as a correlation between the drug transcriptomic signature from CMAP and the poredicted brain gene expression from a deep learning model.
\n\n Choose a drug from the dropdown to view the 3D activity map."),
selectInput("fileSelect", "Select drug:", choices = file_names),
uiOutput("plotFrame")
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
# Embed the HTML content using an iframe
tags$iframe(
srcdoc = file_content,
width = "100%",
height = "800px",
style = "border: none;"
)
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
runApp('06_shiny-app-for-drug-maps.R')
